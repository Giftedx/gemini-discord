{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase.ts"],"sourcesContent":["/**\n * @fileOverview Initializes and exports the Firebase Admin SDK for server-side use.\n * This ensures a single instance of the SDK is used throughout the application.\n */\n\nimport admin from 'firebase-admin';\n\n// Check if the app is already initialized to prevent re-initialization\nif (!admin.apps.length) {\n  // initializeApp() will automatically use the credentials from the\n  // GOOGLE_APPLICATION_CREDENTIALS environment variable if it is set.\n  admin.initializeApp();\n}\n\nconst firestore = admin.firestore();\n\nexport { admin, firestore };\n"],"names":[],"mappings":"AAAA;;;CAGC;;;AAED;;AAEA,uEAAuE;AACvE,IAAI,CAAC,2HAAA,CAAA,UAAK,CAAC,IAAI,CAAC,MAAM,EAAE;IACtB,kEAAkE;IAClE,oEAAoE;IACpE,2HAAA,CAAA,UAAK,CAAC,aAAa;AACrB;AAEA,MAAM,YAAY,2HAAA,CAAA,UAAK,CAAC,SAAS","debugId":null}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/workflows/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { headers } from 'next/headers';\nimport { admin, firestore } from '@/lib/firebase';\nimport { Workflow } from '@/models/workflow';\n\nconst WORKFLOWS_COLLECTION = 'workflows';\n\n// This function needs to be securely implemented. For this example, we assume\n// the frontend can provide the guildId, but in a real-world multi-tenant app,\n// you would get this from a custom claim in the user's auth token after they've\n// authorized the bot for a specific server.\nasync function getGuildsForUser(uid: string): Promise<string[]> {\n  // Mock implementation: In a real app, you would have a mapping of\n  // user IDs to the guilds they manage.\n  // For now, we'll fetch all workflows and let the frontend filter,\n  // but a real implementation MUST filter by guildId on the backend.\n  return []; \n}\n\nexport async function GET() {\n  const authorization = headers().get('Authorization');\n  if (!authorization?.startsWith('Bearer ')) {\n    return NextResponse.json({ error: 'Unauthorized: Missing token' }, { status: 401 });\n  }\n\n  const idToken = authorization.split('Bearer ')[1];\n  if (!idToken) {\n    return NextResponse.json({ error: 'Unauthorized: Malformed token' }, { status: 401 });\n  }\n\n  let decodedToken;\n  try {\n    decodedToken = await admin.auth().verifyIdToken(idToken);\n  } catch (error) {\n    console.error('Error verifying ID token:', error);\n    return NextResponse.json({ error: 'Unauthorized: Invalid token' }, { status: 401 });\n  }\n\n  try {\n    // In a real multi-tenant app, you'd add: .where('guildId', 'in', managedGuilds)\n    // const managedGuilds = await getGuildsForUser(decodedToken.uid);\n    // if (managedGuilds.length === 0) {\n    //   return NextResponse.json([]);\n    // }\n    \n    const snapshot = await firestore.collection(WORKFLOWS_COLLECTION).get();\n    \n    const workflows: (Workflow & { id: string })[] = [];\n    snapshot.forEach(doc => {\n      workflows.push({ id: doc.id, ...doc.data() as Workflow });\n    });\n\n    return NextResponse.json(workflows);\n  } catch (error) {\n    console.error(\"Error fetching workflows from Firestore:\", error);\n    return NextResponse.json({ error: 'Failed to fetch workflows' }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AAAA;AAAA;;;;AAGA,MAAM,uBAAuB;AAE7B,8EAA8E;AAC9E,8EAA8E;AAC9E,gFAAgF;AAChF,4CAA4C;AAC5C,eAAe,iBAAiB,GAAW;IACzC,kEAAkE;IAClE,sCAAsC;IACtC,kEAAkE;IAClE,mEAAmE;IACnE,OAAO,EAAE;AACX;AAEO,eAAe;IACpB,MAAM,gBAAgB,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD,IAAI,GAAG,CAAC;IACpC,IAAI,CAAC,eAAe,WAAW,YAAY;QACzC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA8B,GAAG;YAAE,QAAQ;QAAI;IACnF;IAEA,MAAM,UAAU,cAAc,KAAK,CAAC,UAAU,CAAC,EAAE;IACjD,IAAI,CAAC,SAAS;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAgC,GAAG;YAAE,QAAQ;QAAI;IACrF;IAEA,IAAI;IACJ,IAAI;QACF,eAAe,MAAM,+JAAA,CAAA,QAAK,CAAC,IAAI,GAAG,aAAa,CAAC;IAClD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA8B,GAAG;YAAE,QAAQ;QAAI;IACnF;IAEA,IAAI;QACF,gFAAgF;QAChF,kEAAkE;QAClE,oCAAoC;QACpC,kCAAkC;QAClC,IAAI;QAEJ,MAAM,WAAW,MAAM,wIAAA,CAAA,YAAS,CAAC,UAAU,CAAC,sBAAsB,GAAG;QAErE,MAAM,YAA2C,EAAE;QACnD,SAAS,OAAO,CAAC,CAAA;YACf,UAAU,IAAI,CAAC;gBAAE,IAAI,IAAI,EAAE;gBAAE,GAAG,IAAI,IAAI,EAAE;YAAa;QACzD;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,4CAA4C;QAC1D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA4B,GAAG;YAAE,QAAQ;QAAI;IACjF;AACF","debugId":null}}]
}