{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase.ts"],"sourcesContent":["/**\n * @fileOverview Initializes and exports the Firebase Admin SDK for server-side use.\n * This ensures a single instance of the SDK is used throughout the application.\n */\n\nimport * as admin from 'firebase-admin';\n\n// Check if the app is already initialized to prevent re-initialization\nif (!admin.apps.length) {\n  admin.initializeApp({\n    // The SDK will automatically use Google Application Default Credentials\n    // in a Cloud Run environment. For local development, you would need\n    // to set up a service account key file.\n  });\n}\n\nconst firestore = admin.firestore();\n\nexport { admin, firestore };\n"],"names":[],"mappings":"AAAA;;;CAGC;;;AAED;;AAEA,uEAAuE;AACvE,IAAI,CAAC,2HAAA,CAAA,OAAU,CAAC,MAAM,EAAE;IACtB,CAAA,GAAA,2HAAA,CAAA,gBAAmB,AAAD,EAAE;IAIpB;AACF;AAEA,MAAM,YAAY,CAAA,GAAA,2HAAA,CAAA,YAAe,AAAD","debugId":null}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/auth/discord/callback/route.ts"],"sourcesContent":["\nimport { NextRequest, NextResponse } from 'next/server';\nimport { admin } from '@/lib/firebase';\n\nexport async function GET(req: NextRequest) {\n  const code = req.nextUrl.searchParams.get('code');\n\n  if (!code) {\n    return NextResponse.json({ error: 'Missing authorization code' }, { status: 400 });\n  }\n\n  try {\n    // 1. Exchange authorization code for an access token\n    const tokenResponse = await fetch('https://discord.com/api/oauth2/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: new URLSearchParams({\n        client_id: process.env.DISCORD_CLIENT_ID!,\n        client_secret: process.env.DISCORD_CLIENT_SECRET!,\n        grant_type: 'authorization_code',\n        code,\n        redirect_uri: `${process.env.NEXT_PUBLIC_BASE_URL}/api/auth/discord/callback`,\n      }),\n    });\n\n    if (!tokenResponse.ok) {\n        const errorText = await tokenResponse.text();\n        console.error('Discord token exchange failed:', errorText);\n        throw new Error(`Error fetching Discord access token: ${tokenResponse.status} ${errorText}`);\n    }\n\n    const tokenData = await tokenResponse.json();\n    const { access_token } = tokenData;\n\n    // 2. Use the access token to fetch the user's Discord profile\n    const userResponse = await fetch('https://discord.com/api/users/@me', {\n      headers: {\n        Authorization: `Bearer ${access_token}`,\n      },\n    });\n\n    if (!userResponse.ok) {\n        const errorText = await userResponse.text();\n        console.error('Failed to fetch Discord user profile:', errorText);\n        throw new Error(`Failed to fetch user profile from Discord: ${userResponse.status} ${errorText}`);\n    }\n\n    const userData = await userResponse.json();\n\n    // 3. Mint a custom Firebase token using the Discord user ID as the UID\n    const customToken = await admin.auth().createCustomToken(userData.id);\n\n    // 4. Redirect to a frontend page with the custom token\n    const redirectUrl = new URL('/auth/verify', process.env.NEXT_PUBLIC_BASE_URL!);\n    redirectUrl.searchParams.set('token', customToken);\n\n    return NextResponse.redirect(redirectUrl.toString());\n\n  } catch (error: any) {\n    console.error('Discord callback error:', error.message);\n    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AACA;AACA;AAAA;;;AAEO,eAAe,IAAI,GAAgB;IACxC,MAAM,OAAO,IAAI,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC;IAE1C,IAAI,CAAC,MAAM;QACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA6B,GAAG;YAAE,QAAQ;QAAI;IAClF;IAEA,IAAI;QACF,qDAAqD;QACrD,MAAM,gBAAgB,MAAM,MAAM,wCAAwC;YACxE,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,IAAI,gBAAgB;gBACxB,WAAW,QAAQ,GAAG,CAAC,iBAAiB;gBACxC,eAAe,QAAQ,GAAG,CAAC,qBAAqB;gBAChD,YAAY;gBACZ;gBACA,cAAc,6DAAoC,0BAA0B,CAAC;YAC/E;QACF;QAEA,IAAI,CAAC,cAAc,EAAE,EAAE;YACnB,MAAM,YAAY,MAAM,cAAc,IAAI;YAC1C,QAAQ,KAAK,CAAC,kCAAkC;YAChD,MAAM,IAAI,MAAM,CAAC,qCAAqC,EAAE,cAAc,MAAM,CAAC,CAAC,EAAE,WAAW;QAC/F;QAEA,MAAM,YAAY,MAAM,cAAc,IAAI;QAC1C,MAAM,EAAE,YAAY,EAAE,GAAG;QAEzB,8DAA8D;QAC9D,MAAM,eAAe,MAAM,MAAM,qCAAqC;YACpE,SAAS;gBACP,eAAe,CAAC,OAAO,EAAE,cAAc;YACzC;QACF;QAEA,IAAI,CAAC,aAAa,EAAE,EAAE;YAClB,MAAM,YAAY,MAAM,aAAa,IAAI;YACzC,QAAQ,KAAK,CAAC,yCAAyC;YACvD,MAAM,IAAI,MAAM,CAAC,2CAA2C,EAAE,aAAa,MAAM,CAAC,CAAC,EAAE,WAAW;QACpG;QAEA,MAAM,WAAW,MAAM,aAAa,IAAI;QAExC,uEAAuE;QACvE,MAAM,cAAc,MAAM,4JAAA,CAAA,QAAK,CAAC,IAAI,GAAG,iBAAiB,CAAC,SAAS,EAAE;QAEpE,uDAAuD;QACvD,MAAM,cAAc,IAAI,IAAI;QAC5B,YAAY,YAAY,CAAC,GAAG,CAAC,SAAS;QAEtC,OAAO,gIAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,YAAY,QAAQ;IAEnD,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,2BAA2B,MAAM,OAAO;QACtD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC7E;AACF","debugId":null}}]
}